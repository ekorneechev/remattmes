#!/usr/bin/python3

# remattmess
# REMove ATTachments from MESSage
# Script for remove attachments from msg-file
# Copyright (C) 2021 Evgeniy Korneechev <ek@myconnector.ru>

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.

# Thanks:
# https://docs.python.org/2/library/email-examples.html
# https://stackoverflow.com/questions/9937664/how-to-extract-attachments-from-msg-files/9937707

import os
import sys
import mimetypes
import logging
import subprocess
import argparse

from email import message_from_file, encoders
from email.mime.base import MIMEBase

def backup_attach(msg, msg_filename):
    dirname = "%s.backup" % msg_filename
    os.mkdir(dirname)
    for part in msg.walk():
        filename = part.get_filename()
        if filename:
            fp = open(os.path.join(dirname, filename),'wb')
            fp.write(part.get_payload(decode=True))
            fp.close()
    return

def dd_attach(msg, msg_filename):
    """Search attach, save names, dd zero->file,"""
    attach_list=[]
    # dir for empty files
    dirname = "/tmp/%s.dd" % os.path.basename(msg_filename)
    os.system("mkdir -p \"%s\"" % dirname)
    for part in msg.walk():
        filename = part.get_filename()
        if filename:
            attach_list.append(filename)
            filename = filename.replace( '/', '#' ) #fix path
            err = ""
            try:
                with open( os.path.join( dirname, filename ), 'wb' ) as fp:
                    try:
                        fp.write( part.get_payload( decode=True ) )
                    except TypeError as e: err = e
            except OSError as e: err = e
            if err:
                logging.error( "Unable to open attachment!" )
                logging.debug( err )
            # write empty files (retaining mimtype)
            os.system("dd if=/dev/zero of=\"%s\" bs=1 count=1 > /dev/null 2>&1" % os.path.join(dirname, filename))
    return attach_list

def msg_del_attach(msg):
    body = msg.get_payload()[0]
    msg.set_payload([body])
    return msg

def update_msg(msg, msg_filename):
    dirname = "/tmp/%s.dd" % os.path.basename(msg_filename)
    for filename in os.listdir(dirname):
        path = os.path.join(dirname, filename)
        if not os.path.isfile(path):
            continue
        ctype, encoding = mimetypes.guess_type(path)
        if ctype is None or encoding is not None:
            # No guess could be made, or the file is encoded (compressed), so
            # use a generic bag-of-bits type.
            ctype = 'application/octet-stream'
        maintype, subtype = ctype.split('/', 1)
        with open(path, 'rb') as fp:
            attach = MIMEBase(maintype, subtype)
            attach.set_payload(fp.read())
        encoders.encode_base64(attach)
        attach.add_header('Content-Disposition', 'attachment', filename=fix_slash(filename))
        try:
            msg.attach(attach)
            logging.debug("Record empty file (%s) to message." % fix_slash(filename))
        except Exception as e:
            logging.error( "Unable to record file (%s) to message." % fix_slash( filename ) )
            logging.debug( e )
    os.system("rm -rf \"%s\"" % dirname)
    return msg

def fix_slash(string):
    """Replace '#' -> '/' in filename attachment"""
    return string.replace('#','/')

def main(args):
    parser = argparse.ArgumentParser( description="REMove ATTachments from MESSage", formatter_class=argparse.RawDescriptionHelpFormatter )
    parser.add_argument( "-d", "--debug", action = "store_true", dest = "debug", default = False,  help = "debug output" )
    parser.add_argument( "message", type = str, help = "message (file .eml or .msg) for remove" )
    args = parser.parse_args()

    msg_filename = args.message
    log_level = logging.DEBUG if args.debug else logging.INFO
    logging.basicConfig( filename = "/tmp/remattmess.log", format = '%(asctime)s - %(levelname)s: %(message)s', level = log_level )
    try:
        fp = open(msg_filename)
        msg = message_from_file(fp)
        fp.close()
    except Exception as e:
        logging.error( "Unable to convert file to message." )
        logging.debug( e )
        return 1

    logging.info("Start 'remattmess'. File: %s" % msg_filename)
    attach_list = dd_attach(msg, msg_filename)
    if attach_list == []:
        logging.info( "The message has no attachments." )
        return 0
    logging.debug( "Attachments to remove: %s" % fix_slash( ", ".join( attach_list ) ) )
    msg = msg_del_attach(msg)
    msg = update_msg (msg, msg_filename)
    try:
        fp = open(msg_filename, "w")
        print (msg, file=fp)
        fp.close()
        logging.info( "Attachment deletion completed." )
        return 0
    except Exception as e:
        logging.error( "Unable to write message to file." )
        logging.debug( e )
        return 1

if __name__ == '__main__':
    sys.exit(main(sys.argv))
